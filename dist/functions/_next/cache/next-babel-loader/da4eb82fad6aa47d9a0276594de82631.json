{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport * as firebase from 'firebase';\nvar firebaseConfig = {\n  // paste your firebase config here:\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_API_KEY,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\nexport default function loadFirebase() {\n  var firebase, app;\n  return _regeneratorRuntime.async(function loadFirebase$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(import('firebase/app'));\n\n        case 2:\n          firebase = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(import('firebase/firestore'));\n\n        case 5:\n          try {\n            if (!firebase.apps.length) {\n              app = firebase.initializeApp(firebaseConfig);\n              firebase.firestore(app);\n            }\n          } catch (err) {\n            // we skip the \"already exists\" message which is\n            // not an actual error when we're hot-reloading\n            console.log(err);\n\n            if (!/already exists/.test(err.message)) {\n              console.error('Firebase initialization error', err.stack);\n            }\n          }\n\n          return _context.abrupt(\"return\", firebase);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["/Users/tsaylor/sites/tsaylor/sarah-comps-app/lib/db.js"],"names":["firebase","firebaseConfig","apiKey","process","env","FIREBASE_API_KEY","authDomain","databaseURL","FIREBASE_DATABASE_URL","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID","loadFirebase","apps","length","app","initializeApp","firestore","err","console","log","test","message","error","stack"],"mappings":";AAAA,OAAO,KAAKA,QAAZ,MAA0B,UAA1B;AACA,IAAMC,cAAc,GAAG;AACnB;AACAC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,gBAFD;AAGnBC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYC,gBAHL;AAInBE,EAAAA,WAAW,EAAEJ,OAAO,CAACC,GAAR,CAAYI,qBAJN;AAKnBC,EAAAA,SAAS,EAAEN,OAAO,CAACC,GAAR,CAAYM,mBALJ;AAMnBC,EAAAA,aAAa,EAAER,OAAO,CAACC,GAAR,CAAYQ,uBANR;AAOnBC,EAAAA,iBAAiB,EAAEV,OAAO,CAACC,GAAR,CAAYU,4BAPZ;AAQnBC,EAAAA,KAAK,EAAEZ,OAAO,CAACC,GAAR,CAAYY,eARA;AASnBC,EAAAA,aAAa,EAAEd,OAAO,CAACC,GAAR,CAAYc;AATR,CAAvB;AAYE,eAAe,SAAeC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACU,OAAO,cAAP,CADV;;AAAA;AACPnB,UAAAA,QADO;AAAA;AAAA,2CAEP,OAAO,oBAAP,CAFO;;AAAA;AAGb,cAAI;AACF,gBAAI,CAACA,QAAQ,CAACoB,IAAT,CAAcC,MAAnB,EAA2B;AACnBC,cAAAA,GADmB,GACbtB,QAAQ,CAACuB,aAAT,CAAuBtB,cAAvB,CADa;AAEzBD,cAAAA,QAAQ,CAACwB,SAAT,CAAmBF,GAAnB;AACD;AACF,WALD,CAKE,OAAOG,GAAP,EAAY;AACZ;AACA;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,gBAAI,CAAC,iBAAiBG,IAAjB,CAAsBH,GAAG,CAACI,OAA1B,CAAL,EAAyC;AACvCH,cAAAA,OAAO,CAACI,KAAR,CAAc,+BAAd,EAA+CL,GAAG,CAACM,KAAnD;AACD;AACF;;AAfY,2CAgBN/B,QAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as firebase from 'firebase';\nconst firebaseConfig = {\n    // paste your firebase config here:\n    apiKey: process.env.FIREBASE_API_KEY,\n    authDomain: process.env.FIREBASE_API_KEY,\n    databaseURL: process.env.FIREBASE_DATABASE_URL,\n    projectId: process.env.FIREBASE_PROJECT_ID,\n    storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n    messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.FIREBASE_APP_ID,\n    measurementId: process.env.FIREBASE_MEASUREMENT_ID\n}\n\n  export default async function loadFirebase() {\n    const firebase = await import('firebase/app');\n    await import('firebase/firestore');\n    try {\n      if (!firebase.apps.length) {\n        const app = firebase.initializeApp(firebaseConfig);\n        firebase.firestore(app);\n      }\n    } catch (err) {\n      // we skip the \"already exists\" message which is\n      // not an actual error when we're hot-reloading\n      console.log(err);\n      if (!/already exists/.test(err.message)) {\n        console.error('Firebase initialization error', err.stack);\n      }\n    }\n    return firebase;\n  }"]},"metadata":{},"sourceType":"module"}