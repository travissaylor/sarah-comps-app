{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar firebaseConfig = {\n  // paste your firebase config here:\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_API_KEY,\n  databaseURL: process.env.FIREBASE_DATABASE_URL,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID,\n  measurementId: process.env.FIREBASE_MEASUREMENT_ID\n};\nexport default function loadFirebase() {\n  var firebase, app;\n  return _regeneratorRuntime.async(function loadFirebase$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(import('firebase/app'));\n\n        case 2:\n          firebase = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(import('firebase/firestore'));\n\n        case 5:\n          try {\n            if (!firebase.apps.length) {\n              app = firebase.initializeApp(firebaseConfig);\n              firebase.firestore(app);\n            }\n          } catch (err) {\n            // we skip the \"already exists\" message which is\n            // not an actual error when we're hot-reloading\n            console.log(err);\n\n            if (!/already exists/.test(err.message)) {\n              console.error('Firebase initialization error', err.stack);\n            }\n          }\n\n          return _context.abrupt(\"return\", firebase);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}